name: Android APK Build (Triggerable) & Fake Sign

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Get Version Info
        id: version_info
        run: |
          VERSION_INFO=$(./gradlew printVersionInfo --quiet | grep 'VERSION_INFO:' | sed 's/VERSION_INFO: //;s/ (.*)//')
          echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV

      - name: Get Commit SHA and URL
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          REPO_URL="https://github.com/${{ github.repository }}"
          COMMIT_URL="${REPO_URL}/commit/${COMMIT_SHA}"
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
          echo "COMMIT_URL=$COMMIT_URL" >> $GITHUB_ENV

      - name: Build APK (Debug)
        run: ./gradlew assembleDebug

      - name: Build APK (Release)
        run: ./gradlew assembleRelease

      - name: Find APK filenames
        id: find_apks
        run: |
          DEBUG_APK=$(find app/build/outputs/apk/debug/ -name "*.apk")
          RELEASE_APK=$(find app/build/outputs/apk/release/ -name "*.apk")
          echo "DEBUG_APK=$DEBUG_APK" >> $GITHUB_ENV
          echo "RELEASE_APK=$RELEASE_APK" >> $GITHUB_ENV

      # Fake signing step (replace with real signing if needed)
      - name: Fake Sign the Release APK
        run: |
          echo "Pretending to sign ${{ env.RELEASE_APK }}..."
          # No-op
          echo "Signing complete (fake)."

      - name: Fake Verify the signed APK
        run: |
          echo "Pretending to verify ${{ env.RELEASE_APK }}..."
          echo "Verification complete (fake)."

      - name: Upload Debug APK to Catbox
        if: env.DEBUG_APK != ''
        run: |
          echo "Uploading Debug APK to Catbox: ${{ env.DEBUG_APK }}"
          # If you have a Catbox user hash, add: -F "userhash=####"
          UPLOAD_RESPONSE=$(curl -X POST \
              -F "reqtype=fileupload" \
              -F "fileToUpload=@${{ env.DEBUG_APK }}" \
              https://catbox.moe/user/api.php)
          echo "Catbox Debug APK URL: $UPLOAD_RESPONSE"

      - name: Upload Release APK to Catbox
        if: env.RELEASE_APK != ''
        run: |
          echo "Uploading Release APK to Catbox: ${{ env.RELEASE_APK }}"
          # If you have a Catbox user hash, add: -F "userhash=####"
          UPLOAD_RESPONSE=$(curl -X POST \
              -F "reqtype=fileupload" \
              -F "fileToUpload=@${{ env.RELEASE_APK }}" \
              https://catbox.moe/user/api.php)
          echo "Catbox Release APK URL: $UPLOAD_RESPONSE"

      - name: Upload Debug APK as Artifact
        if: env.DEBUG_APK != ''
        uses: actions/upload-artifact@v3
        with:
          name: "Debug APK"
          path: ${{ env.DEBUG_APK }}

      - name: Upload Fake-Signed Release APK as Artifact
        if: env.RELEASE_APK != ''
        uses: actions/upload-artifact@v3
        with:
          name: "Fake-Signed Release APK"
          path: "${{ env.RELEASE_APK }}"
